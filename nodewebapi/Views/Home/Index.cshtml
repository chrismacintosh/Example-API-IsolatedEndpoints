<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.6.0/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/knockout/3.4.0/knockout-min.js"></script>


<div class="container">
    <h2>Loading Live Sensor Values from an Arduino with Knockout.js</h2>
    <h3>The following is an example of using Knockout.js to update sensor values with data being retrieved from API calls.</h3>

    <h4>Knockout needs something to be changing at an interval to correctly be able to update other data. The purpose of the timestamp below is to provide a constant update, upon which case an API call updates the value for the sensors.</h4>
    
    <h5>Time: <p data-bind="text: myValue"></p></h5>
    <p data-bind="text: mySensorReading"></p>
</div>

<script>
    //This has to be an object in order to be able to call it
    var myViewModel;
    var myTimer;

    $(document).ready(function () {
        console.log("ready!");
        myViewModel = new ViewModel();              //create the ViewModel
        ko.applyBindings(myViewModel);              //bind it
        myTimer = window.setInterval(getStatus, 2000);        //get status running;  you can use window.clearInterval(myTimer) to cancel the interval timer when switching from 5 to 10 seconds, etc.
    });

    //this is a proxy for calling the sensors
    function getStatus() {
        myViewModel.myValue(GetData());                     //Set the current time
        myViewModel.mySensorReading(UpdateSensor());        //Get the current sensor reading
    };

    //remember that this stores all the data that is bound
    var ViewModel = function () {
        var self = this;
        self.myValue = ko.observable("Starting...");
        self.mySensorReading = ko.observable(0);
    };

    function GetData() {                                //my proxy for the senson data
        var d = new Date();
        var h = d.getHours();
        var m = d.getMinutes();
        var s = d.getSeconds();
        h = (h < 10) ? "0" + h : h;
        m = (m < 10) ? "0" + m : m;
        s = (s < 10) ? "0" + s : s;
        return (h + ":" + m + ":" + s);
    };

    var fakeout = 0;
    function UpdateSensor() {
        var self = this;
        var result;
        var sensor;
        var result2;
        var sensor2;
        var result3;
        var sensor3;
        $.get("http://localhost:57578/api/Garage/light", function (data) {
            console.log("Connected to API.");
            console.log(data);
            self.sensor = data.sensor;
            self.result = data.value; //don’t think this is necessary at all – it just duplicates .done
        })
        .done(function (data) {
            console.log("Sent data to computed value...");
            console.log(data);
            self.result = data.value;
            self.sensor = data.sensor;
        });
        $.get("http://localhost:57578/api/Garage/temp", function (data) {
            console.log("Connected to API.");
            console.log(data);
            self.sensor2 = data.sensor;
            self.result2 = data.value; //don’t think this is necessary at all – it just duplicates .done
        })
       .done(function (data) {
           console.log("Sent data to computed value...");
           console.log(data);
           self.result2 = data.value;
           self.sensor2 = data.sensor;
       });
        $.get("http://localhost:57578/api/Garage/humidity", function (data) {
            console.log("Connected to API.");
            console.log(data);
            self.sensor3 = data.sensor;
            self.result3 = data.value; //don’t think this is necessary at all – it just duplicates .done
        })
      .done(function (data) {
          console.log("Sent data to computed value...");
          console.log(data);
          self.result3 = data.value;
          self.sensor3 = data.sensor;
      });
        return self.sensor +" "+ self.result + " / " + self.sensor2 + " " + self.result2 + self.sensor3 + " " + self.result3; //If not, this should return something.
    };
</script>
